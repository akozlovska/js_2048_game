{"version":3,"sources":["scripts/Field.js","scripts/Block.js","scripts/main.js"],"names":["GRID_SIZE","Field","fieldElement","cells","createCellElements","map","cellElement","index","Cell","Math","floor","reduce","gridColumns","cell","x","y","gridRows","emptyCells","filter","block","random","length","style","setProperty","mergeBlock","value","blockElement","remove","_block","_mergeBlock","newMergeBlock","i","document","createElement","classList","add","push","append","module","exports","Block","blockContainer","_value","newValue","textContent","className","includes","_x","_y","require","gameField","querySelector","field","score","currentScore","startMessage","loseMessage","winMessage","startButton","allowMove","window","addEventListener","handleMove","once","resetGame","firstChild","removeChild","lastChild","onStart","contains","randomEmptyCell","e","code","preventDefault","key","canMoveRight","moveRight","canMoveLeft","moveLeft","canMoveUp","moveUp","canMoveDown","moveDown","forEach","newMerge","mergeBlocks","some","slideBlocks","groupsOfCells","group","currentCell","lastEmptyCell","j","previousCell","canAccept","cellsByRows","row","reverse","cellsByColumns","column","canMove","groups"],"mappings":"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","file":"main.5ec083f6.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst GRID_SIZE = 4;\n\nclass Field {\n  constructor(fieldElement) {\n    this.cells = createCellElements(fieldElement).map((cellElement, index) => {\n      return new Cell(\n        cellElement,\n        index % GRID_SIZE,\n        Math.floor(index / GRID_SIZE)\n      );\n    });\n  }\n\n  get cellsByColumns() {\n    return this.cells.reduce((gridColumns, cell) => {\n      gridColumns[cell.x] = gridColumns[cell.x] || [];\n      gridColumns[cell.x][cell.y] = cell;\n\n      return gridColumns;\n    }, []);\n  }\n\n  get cellsByRows() {\n    return this.cells.reduce((gridRows, cell) => {\n      gridRows[cell.y] = gridRows[cell.y] || [];\n      gridRows[cell.y][cell.x] = cell;\n\n      return gridRows;\n    }, []);\n  }\n\n  get randomEmptyCell() {\n    const emptyCells = this.cells.filter(cell => cell.block === null);\n    const random = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[random];\n  }\n};\n\nclass Cell {\n  constructor(cellElement, x, y) {\n    this.cellElement = cellElement;\n    this.x = x;\n    this.y = y;\n    this.cellElement.style.setProperty('--x', x);\n    this.cellElement.style.setProperty('--y', y);\n    this.block = null;\n    this.mergeBlock = null;\n  }\n\n  get block() {\n    return this._block;\n  }\n\n  set block(value) {\n    this._block = value;\n\n    if (value !== null) {\n      this._block.x = this.x;\n      this._block.y = this.y;\n    }\n  }\n\n  get mergeBlock() {\n    return this._mergeBlock;\n  }\n\n  set mergeBlock(newMergeBlock) {\n    this._mergeBlock = newMergeBlock;\n\n    if (newMergeBlock !== null) {\n      this._mergeBlock.x = this.x;\n      this._mergeBlock.y = this.y;\n    }\n  }\n\n  canAccept(block) {\n    return this.block === null\n      || (this.mergeBlock === null && this.block.value === block.value);\n  }\n\n  mergeBlocks() {\n    if (this.block !== null && this.mergeBlock !== null) {\n      this.block.value = this.block.value + this.mergeBlock.value;\n      this.mergeBlock.blockElement.remove();\n      this.mergeBlock = null;\n\n      return this.block.value;\n    }\n  }\n}\n\nfunction createCellElements(fieldElement) {\n  const cells = [];\n\n  for (let i = 0; i < GRID_SIZE * GRID_SIZE; i++) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('cell');\n    cells.push(cell);\n    fieldElement.append(cell);\n  }\n\n  return cells;\n}\n\nmodule.exports = { Field };\n","'use strict';\n\nclass Block {\n  constructor(\n    blockContainer,\n    value = Math.random() < 0.1 ? 4 : 2\n  ) {\n    this.blockElement = document.createElement('div');\n    this.blockElement.classList.add('block');\n    blockContainer.append(this.blockElement);\n    this.value = value;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(newValue) {\n    this._value = newValue;\n    this.blockElement.textContent = newValue;\n\n    for (const className of this.blockElement.classList) {\n      if (className.includes('block--')) {\n        this.blockElement.classList.remove(className);\n      }\n    }\n    this.blockElement.classList.add(`block--${newValue}`);\n  }\n\n  set x(value) {\n    this._x = value;\n    this.blockElement.style.setProperty('--x', value);\n  }\n\n  set y(value) {\n    this._y = value;\n    this.blockElement.style.setProperty('--y', value);\n  }\n}\n\nmodule.exports = { Block };\n","'use strict';\n\nconst { Field } = require('./Field');\nconst { Block } = require('./Block');\n\nconst gameField = document.querySelector('.game-field');\nlet field = new Field(gameField);\nconst score = document.querySelector('.game-score');\nlet currentScore = 0;\n\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst startButton = document.querySelector('.start');\n\nconst allowMove = () => {\n  window.addEventListener('keydown', handleMove, { once: true });\n};\n\nconst resetGame = () => {\n  while (gameField.firstChild) {\n    gameField.removeChild(gameField.lastChild);\n  }\n\n  field = new Field(gameField);\n  currentScore = 0;\n  score.textContent = currentScore;\n};\n\nconst onStart = () => {\n  if (startButton.textContent === 'Restart') {\n    if (!loseMessage.classList.contains('hidden')) {\n      loseMessage.classList.add('hidden');\n    }\n\n    if (!winMessage.classList.contains('hidden')) {\n      winMessage.classList.add('hidden');\n    }\n\n    resetGame();\n  } else {\n    startMessage.classList.add('hidden');\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n  }\n\n  field.randomEmptyCell.block = new Block(gameField);\n  field.randomEmptyCell.block = new Block(gameField);\n  allowMove();\n};\n\nstartButton.addEventListener('click', onStart);\n\nstartButton.addEventListener('keydown', (e) => {\n  if (e.code === 'Enter' || e.code === 'Space') {\n    e.preventDefault();\n  }\n});\n\nconst handleMove = (e) => {\n  switch (e.key) {\n    case 'ArrowRight':\n      if (!canMoveRight()) {\n        allowMove();\n\n        return;\n      }\n      moveRight();\n      break;\n\n    case 'ArrowLeft':\n      if (!canMoveLeft()) {\n        allowMove();\n\n        return;\n      }\n      moveLeft();\n      break;\n\n    case 'ArrowUp':\n      if (!canMoveUp()) {\n        allowMove();\n\n        return;\n      }\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      if (!canMoveDown()) {\n        allowMove();\n\n        return;\n      }\n      moveDown();\n      break;\n\n    default:\n      allowMove();\n\n      return;\n  }\n\n  field.cells.forEach(cell => {\n    const newMerge = cell.mergeBlocks();\n\n    if (newMerge) {\n      currentScore += newMerge;\n    }\n  });\n  score.textContent = currentScore;\n\n  if (field.cells.some(cell => cell.block && cell.block.value === 2048)) {\n    winMessage.classList.remove('hidden');\n\n    return;\n  }\n\n  field.randomEmptyCell.block = new Block(gameField);\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n    loseMessage.classList.remove('hidden');\n\n    return;\n  }\n\n  allowMove();\n};\n\nconst slideBlocks = (groupsOfCells) => {\n  groupsOfCells.forEach(group => {\n    for (let i = 1; i < group.length; i++) {\n      const currentCell = group[i];\n\n      if (currentCell.block === null) {\n        continue;\n      }\n\n      let lastEmptyCell = null;\n\n      for (let j = i - 1; j >= 0; j--) {\n        const previousCell = group[j];\n\n        if (!previousCell.canAccept(currentCell.block)) {\n          break;\n        }\n        lastEmptyCell = previousCell;\n      }\n\n      if (lastEmptyCell !== null) {\n        if (lastEmptyCell.block) {\n          lastEmptyCell.mergeBlock = currentCell.block;\n        } else {\n          lastEmptyCell.block = currentCell.block;\n        }\n        currentCell.block = null;\n      }\n    }\n  });\n};\n\nconst moveLeft = () => {\n  return slideBlocks(field.cellsByRows);\n};\n\nconst moveRight = () => {\n  return slideBlocks(field.cellsByRows\n    .map(row => [...row].reverse())\n  );\n};\n\nconst moveUp = () => {\n  return slideBlocks(field.cellsByColumns);\n};\n\nconst moveDown = () => {\n  return slideBlocks(field.cellsByColumns\n    .map(column => [...column].reverse())\n  );\n};\n\nconst canMove = (groups) => {\n  return groups.some(group => {\n    return group.some((cell, index) => {\n      if (index === 0 || cell.block === null) {\n        return false;\n      }\n\n      const previousCell = group[index - 1];\n\n      return previousCell.canAccept(cell.block);\n    });\n  });\n};\n\nconst canMoveLeft = () => {\n  return canMove(field.cellsByRows);\n};\n\nconst canMoveRight = () => {\n  return canMove(field.cellsByRows\n    .map(row => [...row].reverse())\n  );\n};\n\nconst canMoveUp = () => {\n  return canMove(field.cellsByColumns);\n};\n\nconst canMoveDown = () => {\n  return canMove(field.cellsByColumns\n    .map(column => [...column].reverse())\n  );\n};\n"]}